// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int              @id @default(autoincrement())
  email       String           @unique
  password    String
  role        Role             @default(Pracownik)
  permissions UserPermission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  firstName   String?
  lastName    String?

  workDays    WorkDay[]
  taskHours   TaskHour[]
  comments    Comment[]
  userProjects UserProject[]
  userTasks   UserTask[]
}

model UserProject {
  userId   Int
  user     User   @relation(fields: [userId], references: [id])
  projectId Int
  project  Project @relation(fields: [projectId], references: [id])

  @@id([userId, projectId])
}

model UserTask {
  userId  Int
  user    User  @relation(fields: [userId], references: [id])
  taskId  Int
  task    Task  @relation(fields: [taskId], references: [id])

  @@id([userId, taskId])
}

  model Permission {
    id    Int              @id @default(autoincrement())
    name  String
    users UserPermission[]
  }

  model UserPermission {
    permissionId Int
    permission   Permission  @relation(fields: [permissionId], references: [id])
    User   User @relation(fields: [userId], references: [id])
    userId Int

    @@id([userId, permissionId])
  }

  enum Role {
    Pracownik
    Moderator
    Administrator
  }

model TaskHour {
  id        Int      @id @default(autoincrement())
  taskId    Int
  createdAt DateTime @default(now())
  startTime DateTime
  endTime   DateTime
  duration  Int
  note      String?

  task         Task        @relation(fields: [taskId], references: [id])
  workDay      WorkDay?    @relation(fields: [workDayId], references: [id])
  workDayId    Int?
  user   User @relation(fields: [userId], references: [id])
  userId    Int
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  type      String

  workdayId Int
  workday      WorkDay     @relation(fields: [workdayId], references: [id])
  userId    Int
  user   User @relation(fields: [userId], references: [id])
}

model WorkDay {
  id         Int      @id @default(autoincrement())
  userId     Int
  date       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isReviewed Boolean  @default(false)
  reviewedBy Int?

  taskHours        TaskHour[]
  comments     Comment[]
  user   User @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}

model Project {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String

  tasks        Task[]
  userProjects UserProject[]
}

model Task {
  id          Int      @id @default(autoincrement())
  projectId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String

  taskHours   TaskHour[]
  project     Project    @relation(fields: [projectId], references: [id])
  userTasks   UserTask[]
}